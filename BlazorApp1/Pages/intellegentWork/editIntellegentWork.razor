@page "/EditIntellegentWork/{stId:guid}"
@using OOPASU.Domain;
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json
@inject IJSRuntime js

<h3>editIntellegentWork</h3>

@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@stId

<div class="row">
    <EditForm Model="@intellegentWork" OnValidSubmit="@InsertAccount">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            Title: <InputText id="balance" @bind-Value="intellegentWork.Title" class="form-control" />
        </div>
        <div class="form-group">
            Category: <InputText id="name" @bind-Value="intellegentWork.Category" class="form-control" />
        </div>
        <div class="form-group">
            Description: <InputText id="name" @bind-Value="intellegentWork.Description" class="form-control" />
        </div>
        <div class="form-group">
            GRNTI: <InputText id="name" @bind-Value="intellegentWork.GRNTI" class="form-control" />
        </div>
        <div class="form-group">
            DOI: <InputText id="name" @bind-Value="intellegentWork.DOI" class="form-control" />
        </div>
        <div class="form-group">
            Place: <InputText id="name" @bind-Value="intellegentWork.Place" class="form-control" />
        </div>
        <div class="form-group">
            Year: <InputNumber id="name" @bind-Value="intellegentWork.Year" class="form-control" />
        </div>
        <div class="form-group">
            Status: <InputText id="name" @bind-Value="intellegentWork.Status" class="form-control" />
        </div>

        <br />
        <button type="submit" class="btn btn-success">Edit</button>
    </EditForm>
</div>

<br />
<br />

@if (responseMessage != null)
{
    <p>@responseMessage</p>
}


@* <a href="/Accounts">Back to List</a> *@
@* *@
@* *@
@code {
    [Parameter]
    public Guid stId { get; set; }
    public string LessonId { get; set; }

    private string responseMessage { get; set; }
    private IntellegentWork intellegentWork = new IntellegentWork();

    protected override async Task OnInitializedAsync()
    {
        var _intWork = await httpClient.GetFromJsonAsync<IntellegentWork>
            ($"https://localhost:44338/api/IntellegentWorks/{stId}");
        intellegentWork.Id = _intWork.Id;
        intellegentWork.Title = _intWork.Title;
        intellegentWork.Category = _intWork.Category;
        intellegentWork.Description = _intWork.Description;
        intellegentWork.GRNTI = _intWork.GRNTI;
        intellegentWork.DOI = _intWork.DOI;
        intellegentWork.Place = _intWork.Place;
        intellegentWork.Year = _intWork.Year;
        intellegentWork.Status = _intWork.Status;
    }
    private async Task InsertAccount()
    {
        var rs = await httpClient.PutAsJsonAsync($"https://localhost:44338/api/IntellegentWorks/{stId}", intellegentWork);
        if (rs.IsSuccessStatusCode)
        {
            responseMessage = await rs.Content.ReadAsStringAsync();
        }
        else
        {
            responseMessage = await rs.Content.ReadAsStringAsync();
        }
    }
}
